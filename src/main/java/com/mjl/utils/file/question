
1.abstract class和interface有什么区别?
   1.抽象类中可以有构造方法；接口中不能有
   2.抽象类中可以有普通的成员变量；接口中没有普通的成员变量
   3.抽象类中可以包含非抽象的方法；接口中的所有方法都必须是抽象的
   4.抽象类可以有静态方法；接口中不能包含静态方法
   5.一个类可以实现多个接口但只能继承一个抽象类

2. char型变量能不能存贮一个中文汉字？
     可以，char型变量是用来存储Unicode编码的字符的，Unicode编码字符集中包含了汉字

3. 使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的

4. sleep()和 wait()有什么区别?
    sleep是让线程指定休眠时间，然后继续工作  wait则是等待，直到有线程通知notify（）唤醒他才会重新工作。

5. 简述synchronized和java.util.concurrent.locks.Lock的异同？
    主要相同点：Lock能完成synchronized所实现的所有功能
    主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。Lock还有更强大的功能，例如，它的tryLock方法可以非阻塞方式去拿锁。

6.XSS攻击与CRSF攻击区别
    CRSF攻击特点是访问了别人的页面，别人利用用户登录状态的cookies伪造用户请求
    XSS攻击主要在脚本攻击，在登录的网站中利用输入脚本内容，获取cookies并发送到自己的网站，这样就可以用别人的身份登录

7.oracle 和mysql的用法区别
    1.oracle对单双引号的要求严一些，一般不允许用双引号；mysql都可以用
    2.oracle分页用rownum；mysql分页用limit
    3.oracle 建表的时候没有auto_increment，所以想要一个字段自增的话需要添加序列，插入时把序列的值插入进去
    4.对空值的判断，name != ""这样在mysql下不会报错的，但是oracle下会报错。在oracle下的要换成name is not null
    5.mysql的用户权限管理，是放到mysql自动带的一个数据库mysql里面的，而oracle是用户权限是根着表空间走的。
    6.group by,在下oracle下用group by的话，group by后面的字段必须在select后面出现，不然会报错的，而mysql却不会。
    7.oracle的表字段类型也没有mysql多，并且有很多不同，例如：mysql的int,float合成了oracle的number型等。
    8.oracle查询时from 表名后面 不能加上as 不然会报错的，select t.username from test as t而在mysql下是可以的。

8.什么是web容器
    web容器是一种服务程序，就是为应用服务器组（如jsp，servlet等）提供一个运行环境，使JSP、servlet直接跟容器中的环境变量接口交互，不必关注其他系统问题。主要有web服务器来实现。
    例如：tomcat、WebLogic，WebSphere等。该容器提供的接口严格遵守j2ee规范的web application标准。我们把遵循以上标准的web服务就叫做j2ee中的web容器。

9.静态内部类的作用
    1.实例化无需外部类实例
    2.静态内部类可以在外部类的静态上下文（如 static 方法、static 块或静态成员定义）中使用。
    3.还有静态内部类只能访问外部类的静态属性和方法，（封装带来的安全）这是与一般内部类的区别

10.什么是内部类？
    内里面定义的类，可以访问外部类的所有成员属性和方法

11.有几种类加载器？
    引导类加载器：加载jdk核心jar
    扩展类加载器：加载jdk扩展jar
    系统类加载器：加载自己写的jar

12.堆内存，老年代，新生代，永久代
    堆中，新生代用来存放很快就会被GC回收掉的或不是很大的对象，新生代采用复制算法，即将新生代分为3个区，较大的Eden区，和两个较小的Survivor区；新生代的GC叫Minor GC，这时会将新生代还存活的对象复制到一个Survior区。
    老年代存放在程序中经过了好几次回收还能存活的对象或特别大的对象，老年大GC叫Major GC；老年代采用标记清除或标记整理算法。有时又叫full GC
    JVM的方法区，也被称作用永久代，里面存放一些被虚拟机加载的类信息、静态变量、常量等数据
    Major GC 是清理老年代。
    Full GC 是清理整个堆空间—包括年轻代和永久代

13.可以作为GC Root 引用点的是：
    栈中的引用的对象。
    方法区中静态引用指向的对象。
    方法区中常量引用指向的对象。
    Native方法中JNI引用的对象。

14.什么叫内存泄漏：
    有一些对象，不满足被回收的条件，但程序又不会再使用，会导致内存泄漏。

15.集合区别
   Set集合不能有重复的元素
   list是有序集合，可以包含重复的元素，类似于动态数组
   hashmap允许键值为null，线程不安全
   hashtable不允许键值为null,线程安全
   treemap用迭代器得到的建是有序的，默认递增，线程不安全
   arraylist线程不安全，vector线程安全

16.JVM、JRE、JDK区别？
   jvm是java编程语言的核心，运行java程序的，负责将字节码转化成机器具体代码，提供内存分配、垃圾回收等核心java功能。
   jre是JVM的实现，提供一个平台去执行java程序
   jdk,java开发工具

17.线程池的缺点
   并发风险，诸如同步错误和死锁，发生线程泄漏的一种情形出现在任务抛出一个 RuntimeException 或一个 Error 时。
   如果池类没有捕捉到它们，那么线程只会退出而线程池的大小将会永久减少一个。当这种情况发生的次数足够多时，线程池最终就为空，
   而且系统将停止，因为没有可用的线程来处理任务。

18.
-------------------------------------------
1、数据库分库； 
2、缓存，memcached/redis   原理
3、分布式RPC框架，hedwig 接口， 原理机制
4、Spring 原理，AOP实现原理
5、常用的设计模式
6、JVM内存机制
7、数据库索引  B-tree
8、线程同步线程池
9、java基础数据结构， list/map  hashmap的数据存储 put动作 
10.多线程同步和互斥有几种实现方法，都是什么？

-------------------------------------------
1、spring对于事务的处理用到了哪些技术；
2、cglib与jdk??proxy，spring处理事务默认用的哪一个；
3、spring切面编程原理；
4、concurrentHashMap的实现原理；
5、java内存模型；
6、gc?roots概念、哪些对象可作为gc?roots；
7、volatile关键字的作用，指令重排的意义，内存屏障；
8、jvm?垃圾回收原理、永久代的作用；
http://www.journaldev.com/546/difference-between-jdk-jre-and-jvm-in-java
jvm是java编程语言的核心，负责将字节码转化成机器具体代码，提供内存分配、垃圾回收等核心java功能

9、hashmap的结构、原理，hash冲突的解决方案；
10、红黑树的结构；
-------------------------------------------
多线程
1.多线程编程的好处？
    多个程序并发的执行以提高程序的效率

2.有哪些不同的线程生命周期？
     new ，runnable， running ，waiting，blocked  ，dead
     开始 就绪 执行 等待  阻塞  死亡

3.对线程优先级的理解
4.线程调度器？
     负责为runnable状态的线程分配cpu时间，线程的执行依赖于它

5.时间分片？
     将可用的cpu时间分配给可用的runnable线程的过程

6.线程之间是如何通信的？
    wait()、notify()和notifyAll()
    全局变量，进程中的线程共享内存，这是比较常用的通信和交互方式

7.死锁的四个必要条件：
    互斥条件、不可剥夺、部分分配、环路条件
    解决方法：打破它的条件

8.如何保证线程安全：
    当多个线程同时访问临界资源（一个对象，对象中的属性，一个文件，一个数据库等）时，就可能会产生线程安全问题。不过，当多个线程执行一个方法，方法内部的局部变量并不是临界资源，因为方法是在栈上执行的，而Java栈是线程私有的，因此不会产生线程安全问题。
    在Java中，提供了两种方式来实现同步互斥访问：synchronized和Lock

并发
1.什么是阻塞队列？
    队列为空时，取、删除操作；队列满了时，往队列添加操作 都会被阻塞
2.如何用阻塞队列实现生产者-消费者问题？

3.什么是原子操作？
    是指一个不受其他操作影响的操作任务单元
-------------------------------------------
1. string stringbuilder stringbuffer区别和使用
2. string intern 方法使用原理
3. Integer 内部缓存池
4. try catch finally return会不会执行
5. ArrayList LinkedList 使用区别，注意事项，线程安全
6. HashMap 结构，线程安全， TreeMap的数据结构
7. 常用线程池创建方法，注意事项
8. Exception和Error的区别
9. 常见的IO类和注意事项
10. java的类加载机制
-------------------------------------
1. foreach的实现原理
2. java里面改变程序执行流的有哪些
3. 父类，子类的类初始化，对象初始化的执行顺序
4. Integer i1 = hashMap.get("a");
   int i2 = i1
   这个代码有什么问题
5. java持久化的方法有哪些
6. FileInputStream.read(byte[])经过了几次内存拷贝
7. java读取大文件可以有什么优化方式
8. 如何自定义一个异常
9. java编译的时候提示乱码错误是什么原因
10. java的多态有哪几种
-----------------------------------
1. cookie和session区别，禁用cookie可以怎么处理
2. java对象内存布局
3. 成员内部类为什么能用访问外部类
4. final可以提高程序执行效率吗
5. static变量存储在哪里
6. java接口比抽象类方法执行效率差有没有依据
7. 索引的分类，优缺点
8. sql语句的优化
